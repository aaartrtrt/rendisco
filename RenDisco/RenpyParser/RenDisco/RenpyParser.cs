//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./RenDisco/Renpy.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class RenpyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, IDENT=12, STRING=13, FLOAT=14, INT=15, NL=16, WS=17, 
		LINE_COMMENT=18, INDENT=19, DEDENT=20, LABEL=21, DEFINE=22, CHARACTER=23, 
		COLOR=24, SCENE=25, WITH=26, PAUSE=27, PLAY=28, MUSIC=29, FADEIN=30, FADEOUT=31, 
		JUMP=32, CALL=33, RETURN=34, MENU=35, DEFAULT=36, STOP=37, IF=38, ELIF=39, 
		ELSE=40, TRUE=41, FALSE=42;
	public const int
		RULE_script = 0, RULE_statement = 1, RULE_label_def = 2, RULE_character_def = 3, 
		RULE_scene_def = 4, RULE_pause_def = 5, RULE_play_music_def = 6, RULE_stop_music_def = 7, 
		RULE_jump_def = 8, RULE_call_def = 9, RULE_menu_def = 10, RULE_menu_option = 11, 
		RULE_default_def = 12, RULE_return_def = 13, RULE_dialogue = 14, RULE_narration = 15, 
		RULE_character_ref = 16, RULE_argument = 17, RULE_conditional_block = 18, 
		RULE_expression = 19;
	public static readonly string[] ruleNames = {
		"script", "statement", "label_def", "character_def", "scene_def", "pause_def", 
		"play_music_def", "stop_music_def", "jump_def", "call_def", "menu_def", 
		"menu_option", "default_def", "return_def", "dialogue", "narration", "character_ref", 
		"argument", "conditional_block", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'='", "'('", "')'", "'bg'", "'+'", "'-'", "'*'", "'/'", 
		"'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"IDENT", "STRING", "FLOAT", "INT", "NL", "WS", "LINE_COMMENT", "INDENT", 
		"DEDENT", "LABEL", "DEFINE", "CHARACTER", "COLOR", "SCENE", "WITH", "PAUSE", 
		"PLAY", "MUSIC", "FADEIN", "FADEOUT", "JUMP", "CALL", "RETURN", "MENU", 
		"DEFAULT", "STOP", "IF", "ELIF", "ELSE", "TRUE", "FALSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Renpy.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RenpyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RenpyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RenpyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(RenpyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(RenpyParser.NL, i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 545903357952L) != 0)) {
				{
				{
				State = 40;
				statement();
				State = 41;
				Match(NL);
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_defContext label_def() {
			return GetRuleContext<Label_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Character_defContext character_def() {
			return GetRuleContext<Character_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scene_defContext scene_def() {
			return GetRuleContext<Scene_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pause_defContext pause_def() {
			return GetRuleContext<Pause_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Play_music_defContext play_music_def() {
			return GetRuleContext<Play_music_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stop_music_defContext stop_music_def() {
			return GetRuleContext<Stop_music_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_defContext jump_def() {
			return GetRuleContext<Jump_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_defContext call_def() {
			return GetRuleContext<Call_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_defContext menu_def() {
			return GetRuleContext<Menu_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_defContext default_def() {
			return GetRuleContext<Default_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_defContext return_def() {
			return GetRuleContext<Return_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DialogueContext dialogue() {
			return GetRuleContext<DialogueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NarrationContext narration() {
			return GetRuleContext<NarrationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_blockContext conditional_block() {
			return GetRuleContext<Conditional_blockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LABEL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				label_def();
				}
				break;
			case DEFINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				character_def();
				}
				break;
			case SCENE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				scene_def();
				}
				break;
			case PAUSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51;
				pause_def();
				}
				break;
			case PLAY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 52;
				play_music_def();
				}
				break;
			case STOP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 53;
				stop_music_def();
				}
				break;
			case JUMP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 54;
				jump_def();
				}
				break;
			case CALL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 55;
				call_def();
				}
				break;
			case MENU:
				EnterOuterAlt(_localctx, 9);
				{
				State = 56;
				menu_def();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 57;
				default_def();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 11);
				{
				State = 58;
				return_def();
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 12);
				{
				State = 59;
				dialogue();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 13);
				{
				State = 60;
				narration();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 14);
				{
				State = 61;
				conditional_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(RenpyParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(RenpyParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Label_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterLabel_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitLabel_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_defContext label_def() {
		Label_defContext _localctx = new Label_defContext(Context, State);
		EnterRule(_localctx, 4, RULE_label_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(LABEL);
			State = 65;
			Match(IDENT);
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 66;
				argument();
				}
			}

			State = 69;
			Match(T__0);
			State = 70;
			Match(NL);
			State = 71;
			Match(INDENT);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 545903357952L) != 0)) {
				{
				{
				State = 72;
				statement();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(RenpyParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(RenpyParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RenpyParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RenpyParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLOR() { return GetToken(RenpyParser.COLOR, 0); }
		public Character_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterCharacter_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitCharacter_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_defContext character_def() {
		Character_defContext _localctx = new Character_defContext(Context, State);
		EnterRule(_localctx, 6, RULE_character_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(DEFINE);
			State = 81;
			Match(IDENT);
			State = 82;
			Match(T__1);
			State = 83;
			Match(CHARACTER);
			State = 84;
			Match(T__2);
			State = 85;
			Match(STRING);
			State = 86;
			Match(T__3);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLOR) {
				{
				State = 87;
				Match(COLOR);
				State = 88;
				Match(T__2);
				State = 89;
				Match(STRING);
				State = 90;
				Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scene_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCENE() { return GetToken(RenpyParser.SCENE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		public Scene_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scene_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterScene_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitScene_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScene_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scene_defContext scene_def() {
		Scene_defContext _localctx = new Scene_defContext(Context, State);
		EnterRule(_localctx, 8, RULE_scene_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(SCENE);
			State = 94;
			Match(T__4);
			State = 95;
			Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pause_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAUSE() { return GetToken(RenpyParser.PAUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RenpyParser.INT, 0); }
		public Pause_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pause_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterPause_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitPause_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPause_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pause_defContext pause_def() {
		Pause_defContext _localctx = new Pause_defContext(Context, State);
		EnterRule(_localctx, 10, RULE_pause_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(PAUSE);
			State = 98;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Play_music_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLAY() { return GetToken(RenpyParser.PLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUSIC() { return GetToken(RenpyParser.MUSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FADEIN() { return GetToken(RenpyParser.FADEIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(RenpyParser.FLOAT, 0); }
		public Play_music_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_play_music_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterPlay_music_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitPlay_music_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlay_music_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Play_music_defContext play_music_def() {
		Play_music_defContext _localctx = new Play_music_defContext(Context, State);
		EnterRule(_localctx, 12, RULE_play_music_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(PLAY);
			State = 101;
			Match(MUSIC);
			State = 102;
			Match(STRING);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FADEIN) {
				{
				State = 103;
				Match(FADEIN);
				State = 104;
				Match(FLOAT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stop_music_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(RenpyParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUSIC() { return GetToken(RenpyParser.MUSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FADEOUT() { return GetToken(RenpyParser.FADEOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(RenpyParser.FLOAT, 0); }
		public Stop_music_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stop_music_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterStop_music_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitStop_music_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStop_music_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stop_music_defContext stop_music_def() {
		Stop_music_defContext _localctx = new Stop_music_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_stop_music_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(STOP);
			State = 108;
			Match(MUSIC);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FADEOUT) {
				{
				State = 109;
				Match(FADEOUT);
				State = 110;
				Match(FLOAT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUMP() { return GetToken(RenpyParser.JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public Jump_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterJump_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitJump_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_defContext jump_def() {
		Jump_defContext _localctx = new Jump_defContext(Context, State);
		EnterRule(_localctx, 16, RULE_jump_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(JUMP);
			State = 114;
			Match(IDENT);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 115;
				argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(RenpyParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public Call_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterCall_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitCall_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_defContext call_def() {
		Call_defContext _localctx = new Call_defContext(Context, State);
		EnterRule(_localctx, 18, RULE_call_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(CALL);
			State = 119;
			Match(IDENT);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 120;
				argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENU() { return GetToken(RenpyParser.MENU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Menu_optionContext[] menu_option() {
			return GetRuleContexts<Menu_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_optionContext menu_option(int i) {
			return GetRuleContext<Menu_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(RenpyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(RenpyParser.NL, i);
		}
		public Menu_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterMenu_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitMenu_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_defContext menu_def() {
		Menu_defContext _localctx = new Menu_defContext(Context, State);
		EnterRule(_localctx, 20, RULE_menu_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(MENU);
			State = 124;
			Match(T__0);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING) {
				{
				{
				State = 125;
				menu_option();
				State = 126;
				Match(NL);
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 133;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Menu_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterMenu_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitMenu_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_optionContext menu_option() {
		Menu_optionContext _localctx = new Menu_optionContext(Context, State);
		EnterRule(_localctx, 22, RULE_menu_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(STRING);
			State = 136;
			Match(T__0);
			State = 137;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(RenpyParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterDefault_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitDefault_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_defContext default_def() {
		Default_defContext _localctx = new Default_defContext(Context, State);
		EnterRule(_localctx, 24, RULE_default_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(DEFAULT);
			State = 140;
			Match(IDENT);
			State = 141;
			Match(T__1);
			State = 142;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(RenpyParser.RETURN, 0); }
		public Return_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterReturn_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitReturn_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_defContext return_def() {
		Return_defContext _localctx = new Return_defContext(Context, State);
		EnterRule(_localctx, 26, RULE_return_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DialogueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Character_refContext character_ref() {
			return GetRuleContext<Character_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		public DialogueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterDialogue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitDialogue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DialogueContext dialogue() {
		DialogueContext _localctx = new DialogueContext(Context, State);
		EnterRule(_localctx, 28, RULE_dialogue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			character_ref();
			State = 147;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NarrationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		public NarrationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_narration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterNarration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitNarration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNarration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NarrationContext narration() {
		NarrationContext _localctx = new NarrationContext(Context, State);
		EnterRule(_localctx, 30, RULE_narration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		public Character_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterCharacter_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitCharacter_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_refContext character_ref() {
		Character_refContext _localctx = new Character_refContext(Context, State);
		EnterRule(_localctx, 32, RULE_character_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 34, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(T__2);
			State = 154;
			expression(0);
			State = 155;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(RenpyParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(RenpyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(RenpyParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INDENT() { return GetTokens(RenpyParser.INDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT(int i) {
			return GetToken(RenpyParser.INDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEDENT() { return GetTokens(RenpyParser.DEDENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT(int i) {
			return GetToken(RenpyParser.DEDENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(RenpyParser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(RenpyParser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(RenpyParser.ELSE, 0); }
		public Conditional_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterConditional_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitConditional_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_blockContext conditional_block() {
		Conditional_blockContext _localctx = new Conditional_blockContext(Context, State);
		EnterRule(_localctx, 36, RULE_conditional_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(IF);
			State = 158;
			expression(0);
			State = 159;
			Match(T__0);
			State = 160;
			Match(NL);
			State = 161;
			Match(INDENT);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 545903357952L) != 0)) {
				{
				{
				State = 162;
				statement();
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 168;
			Match(DEDENT);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELIF) {
				{
				{
				State = 169;
				Match(ELIF);
				State = 170;
				expression(0);
				State = 171;
				Match(T__0);
				State = 172;
				Match(NL);
				State = 173;
				Match(INDENT);
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 545903357952L) != 0)) {
					{
					{
					State = 174;
					statement();
					}
					}
					State = 179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 180;
				Match(DEDENT);
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 187;
				Match(ELSE);
				State = 188;
				Match(T__0);
				State = 189;
				Match(NL);
				State = 190;
				Match(INDENT);
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 545903357952L) != 0)) {
					{
					{
					State = 191;
					statement();
					}
					}
					State = 196;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 197;
				Match(DEDENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RenpyParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(RenpyParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(RenpyParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(RenpyParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				State = 201;
				Match(INT);
				}
				break;
			case FLOAT:
				{
				State = 202;
				Match(FLOAT);
				}
				break;
			case STRING:
				{
				State = 203;
				Match(STRING);
				}
				break;
			case IDENT:
				{
				State = 204;
				Match(IDENT);
				}
				break;
			case TRUE:
				{
				State = 205;
				Match(TRUE);
				}
				break;
			case FALSE:
				{
				State = 206;
				Match(FALSE);
				}
				break;
			case T__2:
				{
				State = 207;
				Match(T__2);
				State = 208;
				expression(0);
				State = 209;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 225;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 213;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 214;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 960L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 215;
						expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 216;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 217;
						Match(T__9);
						State = 218;
						expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 219;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 220;
						Match(T__10);
						State = 221;
						expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 222;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 223;
						Match(T__1);
						State = 224;
						expression(5);
						}
						break;
					}
					} 
				}
				State = 229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,42,231,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,5,0,44,8,
		0,10,0,12,0,47,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,3,1,63,8,1,1,2,1,2,1,2,3,2,68,8,2,1,2,1,2,1,2,1,2,5,2,74,8,2,10,2,
		12,2,77,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,92,
		8,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,106,8,6,1,7,1,
		7,1,7,1,7,3,7,112,8,7,1,8,1,8,1,8,3,8,117,8,8,1,9,1,9,1,9,3,9,122,8,9,
		1,10,1,10,1,10,1,10,1,10,5,10,129,8,10,10,10,12,10,132,9,10,1,10,1,10,
		1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,
		1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
		5,18,164,8,18,10,18,12,18,167,9,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		5,18,176,8,18,10,18,12,18,179,9,18,1,18,1,18,5,18,183,8,18,10,18,12,18,
		186,9,18,1,18,1,18,1,18,1,18,1,18,5,18,193,8,18,10,18,12,18,196,9,18,1,
		18,3,18,199,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		3,19,212,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,5,19,226,8,19,10,19,12,19,229,9,19,1,19,0,1,38,20,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,0,1,1,0,6,9,247,0,45,1,0,0,0,2,62,
		1,0,0,0,4,64,1,0,0,0,6,80,1,0,0,0,8,93,1,0,0,0,10,97,1,0,0,0,12,100,1,
		0,0,0,14,107,1,0,0,0,16,113,1,0,0,0,18,118,1,0,0,0,20,123,1,0,0,0,22,135,
		1,0,0,0,24,139,1,0,0,0,26,144,1,0,0,0,28,146,1,0,0,0,30,149,1,0,0,0,32,
		151,1,0,0,0,34,153,1,0,0,0,36,157,1,0,0,0,38,211,1,0,0,0,40,41,3,2,1,0,
		41,42,5,16,0,0,42,44,1,0,0,0,43,40,1,0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,
		45,46,1,0,0,0,46,1,1,0,0,0,47,45,1,0,0,0,48,63,3,4,2,0,49,63,3,6,3,0,50,
		63,3,8,4,0,51,63,3,10,5,0,52,63,3,12,6,0,53,63,3,14,7,0,54,63,3,16,8,0,
		55,63,3,18,9,0,56,63,3,20,10,0,57,63,3,24,12,0,58,63,3,26,13,0,59,63,3,
		28,14,0,60,63,3,30,15,0,61,63,3,36,18,0,62,48,1,0,0,0,62,49,1,0,0,0,62,
		50,1,0,0,0,62,51,1,0,0,0,62,52,1,0,0,0,62,53,1,0,0,0,62,54,1,0,0,0,62,
		55,1,0,0,0,62,56,1,0,0,0,62,57,1,0,0,0,62,58,1,0,0,0,62,59,1,0,0,0,62,
		60,1,0,0,0,62,61,1,0,0,0,63,3,1,0,0,0,64,65,5,21,0,0,65,67,5,12,0,0,66,
		68,3,34,17,0,67,66,1,0,0,0,67,68,1,0,0,0,68,69,1,0,0,0,69,70,5,1,0,0,70,
		71,5,16,0,0,71,75,5,19,0,0,72,74,3,2,1,0,73,72,1,0,0,0,74,77,1,0,0,0,75,
		73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,5,20,0,0,79,
		5,1,0,0,0,80,81,5,22,0,0,81,82,5,12,0,0,82,83,5,2,0,0,83,84,5,23,0,0,84,
		85,5,3,0,0,85,86,5,13,0,0,86,91,5,4,0,0,87,88,5,24,0,0,88,89,5,3,0,0,89,
		90,5,13,0,0,90,92,5,4,0,0,91,87,1,0,0,0,91,92,1,0,0,0,92,7,1,0,0,0,93,
		94,5,25,0,0,94,95,5,5,0,0,95,96,5,12,0,0,96,9,1,0,0,0,97,98,5,27,0,0,98,
		99,5,15,0,0,99,11,1,0,0,0,100,101,5,28,0,0,101,102,5,29,0,0,102,105,5,
		13,0,0,103,104,5,30,0,0,104,106,5,14,0,0,105,103,1,0,0,0,105,106,1,0,0,
		0,106,13,1,0,0,0,107,108,5,37,0,0,108,111,5,29,0,0,109,110,5,31,0,0,110,
		112,5,14,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,15,1,0,0,0,113,114,5,
		32,0,0,114,116,5,12,0,0,115,117,3,34,17,0,116,115,1,0,0,0,116,117,1,0,
		0,0,117,17,1,0,0,0,118,119,5,33,0,0,119,121,5,12,0,0,120,122,3,34,17,0,
		121,120,1,0,0,0,121,122,1,0,0,0,122,19,1,0,0,0,123,124,5,35,0,0,124,130,
		5,1,0,0,125,126,3,22,11,0,126,127,5,16,0,0,127,129,1,0,0,0,128,125,1,0,
		0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,133,1,0,0,0,132,
		130,1,0,0,0,133,134,5,20,0,0,134,21,1,0,0,0,135,136,5,13,0,0,136,137,5,
		1,0,0,137,138,3,2,1,0,138,23,1,0,0,0,139,140,5,36,0,0,140,141,5,12,0,0,
		141,142,5,2,0,0,142,143,3,38,19,0,143,25,1,0,0,0,144,145,5,34,0,0,145,
		27,1,0,0,0,146,147,3,32,16,0,147,148,5,13,0,0,148,29,1,0,0,0,149,150,5,
		13,0,0,150,31,1,0,0,0,151,152,5,12,0,0,152,33,1,0,0,0,153,154,5,3,0,0,
		154,155,3,38,19,0,155,156,5,4,0,0,156,35,1,0,0,0,157,158,5,38,0,0,158,
		159,3,38,19,0,159,160,5,1,0,0,160,161,5,16,0,0,161,165,5,19,0,0,162,164,
		3,2,1,0,163,162,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,
		0,166,168,1,0,0,0,167,165,1,0,0,0,168,184,5,20,0,0,169,170,5,39,0,0,170,
		171,3,38,19,0,171,172,5,1,0,0,172,173,5,16,0,0,173,177,5,19,0,0,174,176,
		3,2,1,0,175,174,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,
		0,178,180,1,0,0,0,179,177,1,0,0,0,180,181,5,20,0,0,181,183,1,0,0,0,182,
		169,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,198,1,
		0,0,0,186,184,1,0,0,0,187,188,5,40,0,0,188,189,5,1,0,0,189,190,5,16,0,
		0,190,194,5,19,0,0,191,193,3,2,1,0,192,191,1,0,0,0,193,196,1,0,0,0,194,
		192,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,199,5,
		20,0,0,198,187,1,0,0,0,198,199,1,0,0,0,199,37,1,0,0,0,200,201,6,19,-1,
		0,201,212,5,15,0,0,202,212,5,14,0,0,203,212,5,13,0,0,204,212,5,12,0,0,
		205,212,5,41,0,0,206,212,5,42,0,0,207,208,5,3,0,0,208,209,3,38,19,0,209,
		210,5,4,0,0,210,212,1,0,0,0,211,200,1,0,0,0,211,202,1,0,0,0,211,203,1,
		0,0,0,211,204,1,0,0,0,211,205,1,0,0,0,211,206,1,0,0,0,211,207,1,0,0,0,
		212,227,1,0,0,0,213,214,10,7,0,0,214,215,7,0,0,0,215,226,3,38,19,8,216,
		217,10,6,0,0,217,218,5,10,0,0,218,226,3,38,19,7,219,220,10,5,0,0,220,221,
		5,11,0,0,221,226,3,38,19,6,222,223,10,4,0,0,223,224,5,2,0,0,224,226,3,
		38,19,5,225,213,1,0,0,0,225,216,1,0,0,0,225,219,1,0,0,0,225,222,1,0,0,
		0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,39,1,0,0,0,229,227,
		1,0,0,0,18,45,62,67,75,91,105,111,116,121,130,165,177,184,194,198,211,
		225,227
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
