//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./RenDisco/Renpy.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IRenpyListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class RenpyBaseListener : IRenpyListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] RenpyParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] RenpyParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] RenpyParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] RenpyParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.label_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLabel_def([NotNull] RenpyParser.Label_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.label_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLabel_def([NotNull] RenpyParser.Label_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.character_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharacter_def([NotNull] RenpyParser.Character_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.character_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharacter_def([NotNull] RenpyParser.Character_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.scene_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScene_def([NotNull] RenpyParser.Scene_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.scene_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScene_def([NotNull] RenpyParser.Scene_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.pause_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPause_def([NotNull] RenpyParser.Pause_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.pause_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPause_def([NotNull] RenpyParser.Pause_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.play_music_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPlay_music_def([NotNull] RenpyParser.Play_music_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.play_music_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPlay_music_def([NotNull] RenpyParser.Play_music_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.stop_music_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStop_music_def([NotNull] RenpyParser.Stop_music_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.stop_music_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStop_music_def([NotNull] RenpyParser.Stop_music_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.jump_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterJump_def([NotNull] RenpyParser.Jump_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.jump_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitJump_def([NotNull] RenpyParser.Jump_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.call_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCall_def([NotNull] RenpyParser.Call_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.call_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCall_def([NotNull] RenpyParser.Call_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.menu_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMenu_def([NotNull] RenpyParser.Menu_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.menu_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMenu_def([NotNull] RenpyParser.Menu_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.menu_option"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMenu_option([NotNull] RenpyParser.Menu_optionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.menu_option"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMenu_option([NotNull] RenpyParser.Menu_optionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.default_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefault_def([NotNull] RenpyParser.Default_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.default_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefault_def([NotNull] RenpyParser.Default_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.return_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturn_def([NotNull] RenpyParser.Return_defContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.return_def"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturn_def([NotNull] RenpyParser.Return_defContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.dialogue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDialogue([NotNull] RenpyParser.DialogueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.dialogue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDialogue([NotNull] RenpyParser.DialogueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.narration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNarration([NotNull] RenpyParser.NarrationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.narration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNarration([NotNull] RenpyParser.NarrationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.character_ref"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCharacter_ref([NotNull] RenpyParser.Character_refContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.character_ref"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCharacter_ref([NotNull] RenpyParser.Character_refContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.aguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAguments([NotNull] RenpyParser.AgumentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.aguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAguments([NotNull] RenpyParser.AgumentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgument([NotNull] RenpyParser.ArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgument([NotNull] RenpyParser.ArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.conditional_block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditional_block([NotNull] RenpyParser.Conditional_blockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.conditional_block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditional_block([NotNull] RenpyParser.Conditional_blockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.elif_block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElif_block([NotNull] RenpyParser.Elif_blockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.elif_block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElif_block([NotNull] RenpyParser.Elif_blockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.else_block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElse_block([NotNull] RenpyParser.Else_blockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.else_block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElse_block([NotNull] RenpyParser.Else_blockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] RenpyParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] RenpyParser.AssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RenpyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] RenpyParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RenpyParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] RenpyParser.ExpressionContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
