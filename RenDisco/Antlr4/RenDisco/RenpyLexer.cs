//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./RenDisco/Renpy.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


  using AntlrDenter;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class RenpyLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, IDENT=13, STRING=14, FLOAT=15, INT=16, NL=17, 
		WS=18, LINE_COMMENT=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "IDENT", "STRING", "FLOAT", "INT", "NL", "WS", 
		"LINE_COMMENT"
	};


	  private DenterHelper denter;

	  public override IToken NextToken()
	  {
	    if (denter == null)
	    {
	      denter = DenterHelper.Builder()
	        .Nl(NL)
	        .Indent(RenpyParser.INDENT)
	        .Dedent(RenpyParser.DEDENT)
	        .PullToken(base.NextToken);
	    }

	    return denter.NextToken();
	  }


	public RenpyLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public RenpyLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", "'='", "'('", "')'", "'bg'", "','", "'+'", "'-'", "'*'", 
		"'/'", "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "IDENT", "STRING", "FLOAT", "INT", "NL", "WS", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Renpy.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RenpyLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,132,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
		11,1,11,1,12,1,12,5,12,67,8,12,10,12,12,12,70,9,12,1,13,1,13,5,13,74,8,
		13,10,13,12,13,77,9,13,1,13,1,13,1,14,4,14,82,8,14,11,14,12,14,83,1,14,
		1,14,4,14,88,8,14,11,14,12,14,89,3,14,92,8,14,1,14,1,14,4,14,96,8,14,11,
		14,12,14,97,3,14,100,8,14,1,15,4,15,103,8,15,11,15,12,15,104,1,16,3,16,
		108,8,16,1,16,1,16,5,16,112,8,16,10,16,12,16,115,9,16,1,17,4,17,118,8,
		17,11,17,12,17,119,1,17,1,17,1,18,1,18,5,18,126,8,18,10,18,12,18,129,9,
		18,1,18,1,18,1,75,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,1,0,5,3,0,65,90,95,
		95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,9,9,32,32,2,0,10,
		10,13,13,143,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,41,1,0,0,0,5,43,
		1,0,0,0,7,45,1,0,0,0,9,47,1,0,0,0,11,50,1,0,0,0,13,52,1,0,0,0,15,54,1,
		0,0,0,17,56,1,0,0,0,19,58,1,0,0,0,21,60,1,0,0,0,23,62,1,0,0,0,25,64,1,
		0,0,0,27,71,1,0,0,0,29,99,1,0,0,0,31,102,1,0,0,0,33,107,1,0,0,0,35,117,
		1,0,0,0,37,123,1,0,0,0,39,40,5,58,0,0,40,2,1,0,0,0,41,42,5,61,0,0,42,4,
		1,0,0,0,43,44,5,40,0,0,44,6,1,0,0,0,45,46,5,41,0,0,46,8,1,0,0,0,47,48,
		5,98,0,0,48,49,5,103,0,0,49,10,1,0,0,0,50,51,5,44,0,0,51,12,1,0,0,0,52,
		53,5,43,0,0,53,14,1,0,0,0,54,55,5,45,0,0,55,16,1,0,0,0,56,57,5,42,0,0,
		57,18,1,0,0,0,58,59,5,47,0,0,59,20,1,0,0,0,60,61,5,60,0,0,61,22,1,0,0,
		0,62,63,5,62,0,0,63,24,1,0,0,0,64,68,7,0,0,0,65,67,7,1,0,0,66,65,1,0,0,
		0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,26,1,0,0,0,70,68,1,0,0,
		0,71,75,5,34,0,0,72,74,9,0,0,0,73,72,1,0,0,0,74,77,1,0,0,0,75,76,1,0,0,
		0,75,73,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,5,34,0,0,79,28,1,0,0,
		0,80,82,7,2,0,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,
		0,84,91,1,0,0,0,85,87,5,46,0,0,86,88,7,2,0,0,87,86,1,0,0,0,88,89,1,0,0,
		0,89,87,1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,0,91,85,1,0,0,0,91,92,1,0,0,
		0,92,100,1,0,0,0,93,95,5,46,0,0,94,96,7,2,0,0,95,94,1,0,0,0,96,97,1,0,
		0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,100,1,0,0,0,99,81,1,0,0,0,99,93,1,0,
		0,0,100,30,1,0,0,0,101,103,7,2,0,0,102,101,1,0,0,0,103,104,1,0,0,0,104,
		102,1,0,0,0,104,105,1,0,0,0,105,32,1,0,0,0,106,108,5,13,0,0,107,106,1,
		0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,113,5,10,0,0,110,112,5,32,0,
		0,111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,
		34,1,0,0,0,115,113,1,0,0,0,116,118,7,3,0,0,117,116,1,0,0,0,118,119,1,0,
		0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,121,1,0,0,0,121,122,6,17,0,0,122,
		36,1,0,0,0,123,127,5,35,0,0,124,126,8,4,0,0,125,124,1,0,0,0,126,129,1,
		0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,
		130,131,6,18,0,0,131,38,1,0,0,0,13,0,68,75,83,89,91,97,99,104,107,113,
		119,127,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
