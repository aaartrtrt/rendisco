//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./RenDisco/Renpy.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class RenpyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, IDENT=36, STRING=37, NUMBER=38, 
		NL=39, WS=40, LINE_COMMENT=41, INDENT=42, DEDENT=43, WITH=44, FADEIN=45, 
		FADEOUT=46, JUMP=47, CALL=48, RETURN=49, MENU=50, DEFAULT=51, TRUE=52, 
		FALSE=53;
	public const int
		RULE_block = 0, RULE_statement = 1, RULE_label_def = 2, RULE_character_def = 3, 
		RULE_scene_def = 4, RULE_pause_def = 5, RULE_play_music_def = 6, RULE_stop_music_def = 7, 
		RULE_jump_def = 8, RULE_call_def = 9, RULE_menu_def = 10, RULE_menu_option = 11, 
		RULE_default_def = 12, RULE_return_def = 13, RULE_dialogue = 14, RULE_narration = 15, 
		RULE_character_ref = 16, RULE_arguments = 17, RULE_argument = 18, RULE_conditional_block = 19, 
		RULE_elif_block = 20, RULE_else_block = 21, RULE_assignment = 22, RULE_expression = 23;
	public static readonly string[] ruleNames = {
		"block", "statement", "label_def", "character_def", "scene_def", "pause_def", 
		"play_music_def", "stop_music_def", "jump_def", "call_def", "menu_def", 
		"menu_option", "default_def", "return_def", "dialogue", "narration", "character_ref", 
		"arguments", "argument", "conditional_block", "elif_block", "else_block", 
		"assignment", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'label'", "':'", "'define'", "'='", "'Character'", "'('", "','", 
		"'color'", "')'", "'scene'", "'bg'", "'with'", "'dissolve'", "'fade'", 
		"'crossfade'", "'pause'", "'play music'", "'fadein'", "'stop music'", 
		"'fadeout'", "'jump'", "'call'", "'menu'", "'default'", "'return'", "'if'", 
		"'elif'", "'else'", "'$'", "'+'", "'-'", "'*'", "'/'", "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"IDENT", "STRING", "NUMBER", "NL", "WS", "LINE_COMMENT", "INDENT", "DEDENT", 
		"WITH", "FADEIN", "FADEOUT", "JUMP", "CALL", "RETURN", "MENU", "DEFAULT", 
		"TRUE", "FALSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Renpy.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RenpyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RenpyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RenpyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(RenpyParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(RenpyParser.NL, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 0, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			statement();
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 756583957514L) != 0)) {
				{
				{
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 49;
					Match(NL);
					}
					}
					State = 54;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 55;
				statement();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_defContext label_def() {
			return GetRuleContext<Label_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Character_defContext character_def() {
			return GetRuleContext<Character_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scene_defContext scene_def() {
			return GetRuleContext<Scene_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pause_defContext pause_def() {
			return GetRuleContext<Pause_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Play_music_defContext play_music_def() {
			return GetRuleContext<Play_music_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stop_music_defContext stop_music_def() {
			return GetRuleContext<Stop_music_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_defContext jump_def() {
			return GetRuleContext<Jump_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_defContext call_def() {
			return GetRuleContext<Call_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_defContext menu_def() {
			return GetRuleContext<Menu_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_defContext default_def() {
			return GetRuleContext<Default_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_defContext return_def() {
			return GetRuleContext<Return_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DialogueContext dialogue() {
			return GetRuleContext<DialogueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NarrationContext narration() {
			return GetRuleContext<NarrationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_blockContext conditional_block() {
			return GetRuleContext<Conditional_blockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61;
				label_def();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62;
				character_def();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63;
				scene_def();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 4);
				{
				State = 64;
				pause_def();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 5);
				{
				State = 65;
				play_music_def();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 6);
				{
				State = 66;
				stop_music_def();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 7);
				{
				State = 67;
				jump_def();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 8);
				{
				State = 68;
				call_def();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 9);
				{
				State = 69;
				menu_def();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 10);
				{
				State = 70;
				default_def();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 11);
				{
				State = 71;
				return_def();
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 12);
				{
				State = 72;
				assignment();
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 73;
				dialogue();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 14);
				{
				State = 74;
				narration();
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 15);
				{
				State = 75;
				conditional_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		public Label_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterLabel_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitLabel_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_defContext label_def() {
		Label_defContext _localctx = new Label_defContext(Context, State);
		EnterRule(_localctx, 4, RULE_label_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(T__0);
			State = 79;
			Match(IDENT);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 80;
				arguments();
				}
			}

			State = 83;
			Match(T__1);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 84;
				Match(INDENT);
				State = 85;
				block();
				State = 86;
				Match(DEDENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(RenpyParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(RenpyParser.STRING, i);
		}
		public Character_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterCharacter_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitCharacter_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_defContext character_def() {
		Character_defContext _localctx = new Character_defContext(Context, State);
		EnterRule(_localctx, 6, RULE_character_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(T__2);
			State = 91;
			Match(IDENT);
			State = 92;
			Match(T__3);
			State = 93;
			Match(T__4);
			State = 94;
			Match(T__5);
			State = 95;
			Match(STRING);
			State = 96;
			Match(T__6);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 97;
				Match(T__7);
				State = 98;
				Match(T__3);
				State = 99;
				Match(STRING);
				State = 100;
				Match(T__8);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scene_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		public Scene_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scene_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterScene_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitScene_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScene_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scene_defContext scene_def() {
		Scene_defContext _localctx = new Scene_defContext(Context, State);
		EnterRule(_localctx, 8, RULE_scene_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__9);
			State = 104;
			Match(T__10);
			State = 105;
			Match(IDENT);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 106;
				Match(T__11);
				State = 107;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pause_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RenpyParser.NUMBER, 0); }
		public Pause_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pause_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterPause_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitPause_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPause_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pause_defContext pause_def() {
		Pause_defContext _localctx = new Pause_defContext(Context, State);
		EnterRule(_localctx, 10, RULE_pause_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(T__15);
			State = 111;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Play_music_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RenpyParser.NUMBER, 0); }
		public Play_music_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_play_music_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterPlay_music_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitPlay_music_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlay_music_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Play_music_defContext play_music_def() {
		Play_music_defContext _localctx = new Play_music_defContext(Context, State);
		EnterRule(_localctx, 12, RULE_play_music_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(T__16);
			State = 114;
			Match(STRING);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 115;
				Match(T__17);
				State = 116;
				Match(NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stop_music_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RenpyParser.NUMBER, 0); }
		public Stop_music_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stop_music_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterStop_music_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitStop_music_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStop_music_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stop_music_defContext stop_music_def() {
		Stop_music_defContext _localctx = new Stop_music_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_stop_music_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(T__18);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 120;
				Match(T__19);
				State = 121;
				Match(NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Jump_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterJump_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitJump_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_defContext jump_def() {
		Jump_defContext _localctx = new Jump_defContext(Context, State);
		EnterRule(_localctx, 16, RULE_jump_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(T__20);
			State = 125;
			Match(IDENT);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 126;
				arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Call_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterCall_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitCall_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_defContext call_def() {
		Call_defContext _localctx = new Call_defContext(Context, State);
		EnterRule(_localctx, 18, RULE_call_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(T__21);
			State = 130;
			Match(IDENT);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 131;
				arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Menu_optionContext[] menu_option() {
			return GetRuleContexts<Menu_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Menu_optionContext menu_option(int i) {
			return GetRuleContext<Menu_optionContext>(i);
		}
		public Menu_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterMenu_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitMenu_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_defContext menu_def() {
		Menu_defContext _localctx = new Menu_defContext(Context, State);
		EnterRule(_localctx, 20, RULE_menu_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(T__22);
			State = 135;
			Match(T__1);
			State = 136;
			Match(INDENT);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING) {
				{
				{
				State = 137;
				menu_option();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 143;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Menu_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		public Menu_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_menu_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterMenu_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitMenu_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMenu_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Menu_optionContext menu_option() {
		Menu_optionContext _localctx = new Menu_optionContext(Context, State);
		EnterRule(_localctx, 22, RULE_menu_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(STRING);
			State = 146;
			Match(T__1);
			State = 147;
			Match(INDENT);
			State = 148;
			block();
			State = 149;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterDefault_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitDefault_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_defContext default_def() {
		Default_defContext _localctx = new Default_defContext(Context, State);
		EnterRule(_localctx, 24, RULE_default_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(T__23);
			State = 152;
			Match(IDENT);
			State = 153;
			Match(T__3);
			State = 154;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_defContext : ParserRuleContext {
		public Return_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterReturn_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitReturn_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_defContext return_def() {
		Return_defContext _localctx = new Return_defContext(Context, State);
		EnterRule(_localctx, 26, RULE_return_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DialogueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Character_refContext character_ref() {
			return GetRuleContext<Character_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		public DialogueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterDialogue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitDialogue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DialogueContext dialogue() {
		DialogueContext _localctx = new DialogueContext(Context, State);
		EnterRule(_localctx, 28, RULE_dialogue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			character_ref();
			State = 159;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NarrationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		public NarrationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_narration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterNarration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitNarration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNarration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NarrationContext narration() {
		NarrationContext _localctx = new NarrationContext(Context, State);
		EnterRule(_localctx, 30, RULE_narration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		public Character_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterCharacter_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitCharacter_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Character_refContext character_ref() {
		Character_refContext _localctx = new Character_refContext(Context, State);
		EnterRule(_localctx, 32, RULE_character_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 34, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(T__5);
			State = 166;
			argument();
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 167;
				Match(T__6);
				State = 168;
				argument();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 36, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 176;
				Match(IDENT);
				State = 177;
				Match(T__3);
				}
				break;
			}
			State = 180;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Elif_blockContext[] elif_block() {
			return GetRuleContexts<Elif_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_blockContext elif_block(int i) {
			return GetRuleContext<Elif_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public Conditional_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterConditional_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitConditional_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_blockContext conditional_block() {
		Conditional_blockContext _localctx = new Conditional_blockContext(Context, State);
		EnterRule(_localctx, 38, RULE_conditional_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(T__25);
			State = 183;
			expression(0);
			State = 184;
			Match(T__1);
			State = 185;
			Match(INDENT);
			State = 186;
			block();
			State = 187;
			Match(DEDENT);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26) {
				{
				{
				State = 188;
				elif_block();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 194;
				else_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		public Elif_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterElif_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitElif_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_blockContext elif_block() {
		Elif_blockContext _localctx = new Elif_blockContext(Context, State);
		EnterRule(_localctx, 40, RULE_elif_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(T__26);
			State = 198;
			expression(0);
			State = 199;
			Match(T__1);
			State = 200;
			Match(INDENT);
			State = 201;
			block();
			State = 202;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(RenpyParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(RenpyParser.DEDENT, 0); }
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 42, RULE_else_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(T__27);
			State = 205;
			Match(T__1);
			State = 206;
			Match(INDENT);
			State = 207;
			block();
			State = 208;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(T__28);
			State = 211;
			Match(IDENT);
			State = 212;
			Match(T__3);
			State = 213;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RenpyParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RenpyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RenpyParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(RenpyParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(RenpyParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRenpyListener typedListener = listener as IRenpyListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRenpyVisitor<TResult> typedVisitor = visitor as IRenpyVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 216;
				Match(NUMBER);
				}
				break;
			case STRING:
				{
				State = 217;
				Match(STRING);
				}
				break;
			case IDENT:
				{
				State = 218;
				Match(IDENT);
				}
				break;
			case TRUE:
				{
				State = 219;
				Match(TRUE);
				}
				break;
			case FALSE:
				{
				State = 220;
				Match(FALSE);
				}
				break;
			case T__5:
				{
				State = 221;
				Match(T__5);
				State = 222;
				expression(0);
				State = 223;
				Match(T__8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 241;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 239;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 227;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 228;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16106127360L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 229;
						expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 230;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 231;
						Match(T__33);
						State = 232;
						expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 233;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 234;
						Match(T__34);
						State = 235;
						expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 236;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 237;
						Match(T__3);
						State = 238;
						expression(5);
						}
						break;
					}
					} 
				}
				State = 243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 23: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,53,245,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,1,0,5,0,51,8,0,10,0,12,0,54,9,0,1,0,5,0,57,8,0,
		10,0,12,0,60,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,1,77,8,1,1,2,1,2,1,2,3,2,82,8,2,1,2,1,2,1,2,1,2,1,2,3,2,89,8,2,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,102,8,3,1,4,1,4,1,4,1,
		4,1,4,3,4,109,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,118,8,6,1,7,1,7,1,7,
		3,7,123,8,7,1,8,1,8,1,8,3,8,128,8,8,1,9,1,9,1,9,3,9,133,8,9,1,10,1,10,
		1,10,1,10,5,10,139,8,10,10,10,12,10,142,9,10,1,10,1,10,1,11,1,11,1,11,
		1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,
		1,15,1,16,1,16,1,17,1,17,1,17,1,17,5,17,170,8,17,10,17,12,17,173,9,17,
		1,17,1,17,1,18,1,18,3,18,179,8,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,5,19,190,8,19,10,19,12,19,193,9,19,1,19,3,19,196,8,19,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
		1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,226,8,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,240,
		8,23,10,23,12,23,243,9,23,1,23,0,1,46,24,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,0,2,1,0,13,15,1,0,30,33,258,0,48,1,
		0,0,0,2,76,1,0,0,0,4,78,1,0,0,0,6,90,1,0,0,0,8,103,1,0,0,0,10,110,1,0,
		0,0,12,113,1,0,0,0,14,119,1,0,0,0,16,124,1,0,0,0,18,129,1,0,0,0,20,134,
		1,0,0,0,22,145,1,0,0,0,24,151,1,0,0,0,26,156,1,0,0,0,28,158,1,0,0,0,30,
		161,1,0,0,0,32,163,1,0,0,0,34,165,1,0,0,0,36,178,1,0,0,0,38,182,1,0,0,
		0,40,197,1,0,0,0,42,204,1,0,0,0,44,210,1,0,0,0,46,225,1,0,0,0,48,58,3,
		2,1,0,49,51,5,39,0,0,50,49,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,
		0,0,0,53,55,1,0,0,0,54,52,1,0,0,0,55,57,3,2,1,0,56,52,1,0,0,0,57,60,1,
		0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,1,1,0,0,0,60,58,1,0,0,0,61,77,3,4,
		2,0,62,77,3,6,3,0,63,77,3,8,4,0,64,77,3,10,5,0,65,77,3,12,6,0,66,77,3,
		14,7,0,67,77,3,16,8,0,68,77,3,18,9,0,69,77,3,20,10,0,70,77,3,24,12,0,71,
		77,3,26,13,0,72,77,3,44,22,0,73,77,3,28,14,0,74,77,3,30,15,0,75,77,3,38,
		19,0,76,61,1,0,0,0,76,62,1,0,0,0,76,63,1,0,0,0,76,64,1,0,0,0,76,65,1,0,
		0,0,76,66,1,0,0,0,76,67,1,0,0,0,76,68,1,0,0,0,76,69,1,0,0,0,76,70,1,0,
		0,0,76,71,1,0,0,0,76,72,1,0,0,0,76,73,1,0,0,0,76,74,1,0,0,0,76,75,1,0,
		0,0,77,3,1,0,0,0,78,79,5,1,0,0,79,81,5,36,0,0,80,82,3,34,17,0,81,80,1,
		0,0,0,81,82,1,0,0,0,82,83,1,0,0,0,83,88,5,2,0,0,84,85,5,42,0,0,85,86,3,
		0,0,0,86,87,5,43,0,0,87,89,1,0,0,0,88,84,1,0,0,0,88,89,1,0,0,0,89,5,1,
		0,0,0,90,91,5,3,0,0,91,92,5,36,0,0,92,93,5,4,0,0,93,94,5,5,0,0,94,95,5,
		6,0,0,95,96,5,37,0,0,96,101,5,7,0,0,97,98,5,8,0,0,98,99,5,4,0,0,99,100,
		5,37,0,0,100,102,5,9,0,0,101,97,1,0,0,0,101,102,1,0,0,0,102,7,1,0,0,0,
		103,104,5,10,0,0,104,105,5,11,0,0,105,108,5,36,0,0,106,107,5,12,0,0,107,
		109,7,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,9,1,0,0,0,110,111,5,16,
		0,0,111,112,5,38,0,0,112,11,1,0,0,0,113,114,5,17,0,0,114,117,5,37,0,0,
		115,116,5,18,0,0,116,118,5,38,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,
		13,1,0,0,0,119,122,5,19,0,0,120,121,5,20,0,0,121,123,5,38,0,0,122,120,
		1,0,0,0,122,123,1,0,0,0,123,15,1,0,0,0,124,125,5,21,0,0,125,127,5,36,0,
		0,126,128,3,34,17,0,127,126,1,0,0,0,127,128,1,0,0,0,128,17,1,0,0,0,129,
		130,5,22,0,0,130,132,5,36,0,0,131,133,3,34,17,0,132,131,1,0,0,0,132,133,
		1,0,0,0,133,19,1,0,0,0,134,135,5,23,0,0,135,136,5,2,0,0,136,140,5,42,0,
		0,137,139,3,22,11,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,140,
		141,1,0,0,0,141,143,1,0,0,0,142,140,1,0,0,0,143,144,5,43,0,0,144,21,1,
		0,0,0,145,146,5,37,0,0,146,147,5,2,0,0,147,148,5,42,0,0,148,149,3,0,0,
		0,149,150,5,43,0,0,150,23,1,0,0,0,151,152,5,24,0,0,152,153,5,36,0,0,153,
		154,5,4,0,0,154,155,3,46,23,0,155,25,1,0,0,0,156,157,5,25,0,0,157,27,1,
		0,0,0,158,159,3,32,16,0,159,160,5,37,0,0,160,29,1,0,0,0,161,162,5,37,0,
		0,162,31,1,0,0,0,163,164,5,36,0,0,164,33,1,0,0,0,165,166,5,6,0,0,166,171,
		3,36,18,0,167,168,5,7,0,0,168,170,3,36,18,0,169,167,1,0,0,0,170,173,1,
		0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,
		174,175,5,9,0,0,175,35,1,0,0,0,176,177,5,36,0,0,177,179,5,4,0,0,178,176,
		1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,181,3,46,23,0,181,37,1,0,0,
		0,182,183,5,26,0,0,183,184,3,46,23,0,184,185,5,2,0,0,185,186,5,42,0,0,
		186,187,3,0,0,0,187,191,5,43,0,0,188,190,3,40,20,0,189,188,1,0,0,0,190,
		193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,195,1,0,0,0,193,191,1,
		0,0,0,194,196,3,42,21,0,195,194,1,0,0,0,195,196,1,0,0,0,196,39,1,0,0,0,
		197,198,5,27,0,0,198,199,3,46,23,0,199,200,5,2,0,0,200,201,5,42,0,0,201,
		202,3,0,0,0,202,203,5,43,0,0,203,41,1,0,0,0,204,205,5,28,0,0,205,206,5,
		2,0,0,206,207,5,42,0,0,207,208,3,0,0,0,208,209,5,43,0,0,209,43,1,0,0,0,
		210,211,5,29,0,0,211,212,5,36,0,0,212,213,5,4,0,0,213,214,3,46,23,0,214,
		45,1,0,0,0,215,216,6,23,-1,0,216,226,5,38,0,0,217,226,5,37,0,0,218,226,
		5,36,0,0,219,226,5,52,0,0,220,226,5,53,0,0,221,222,5,6,0,0,222,223,3,46,
		23,0,223,224,5,9,0,0,224,226,1,0,0,0,225,215,1,0,0,0,225,217,1,0,0,0,225,
		218,1,0,0,0,225,219,1,0,0,0,225,220,1,0,0,0,225,221,1,0,0,0,226,241,1,
		0,0,0,227,228,10,7,0,0,228,229,7,1,0,0,229,240,3,46,23,8,230,231,10,6,
		0,0,231,232,5,34,0,0,232,240,3,46,23,7,233,234,10,5,0,0,234,235,5,35,0,
		0,235,240,3,46,23,6,236,237,10,4,0,0,237,238,5,4,0,0,238,240,3,46,23,5,
		239,227,1,0,0,0,239,230,1,0,0,0,239,233,1,0,0,0,239,236,1,0,0,0,240,243,
		1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,47,1,0,0,0,243,241,1,0,0,0,
		19,52,58,76,81,88,101,108,117,122,127,132,140,171,178,191,195,225,239,
		241
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
